
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "snfa"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "snfa-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('snfa')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("H.inv.select")
> ### * H.inv.select
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: H.inv.select
> ### Title: Bandwidth matrix selection
> ### Aliases: H.inv.select
> 
> ### ** Examples
> 
> data(USMacro)
> 
> USMacro <- USMacro[complete.cases(USMacro),]
> 
> #Extract data
> X <- as.matrix(USMacro[,c("K", "L")])
> 
> #Generate bandwidth matrix
> print(H.inv.select(X))
             [,1]         [,2]
[1,] 3.642704e-08 0.000000e+00
[2,] 0.000000e+00 1.215789e-08
> #              [,1]         [,2]
> # [1,] 3.642704e-08 0.000000e+00
> # [2,] 0.000000e+00 1.215789e-08
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("H.inv.select", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("allocative.efficiency")
> ### * allocative.efficiency
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: allocative.efficiency
> ### Title: Allocative efficiency estimation
> ### Aliases: allocative.efficiency
> 
> ### ** Examples
> 
> data(USMacro)
> 
> USMacro <- USMacro[complete.cases(USMacro),]
> 
> #Extract data
> X <- as.matrix(USMacro[,c("K", "L")])
> y <- USMacro$Y
> 
> X.price <- as.matrix(USMacro[,c("K.price", "L.price")])
> y.price <- rep(1e9, nrow(USMacro)) #Price of $1 billion of output is $1 billion
> 
> #Run model
> efficiency.model <- allocative.efficiency(X, y,
+                                          X.price, y.price,
+                                          X.constrained = X,
+                                          model = "br",
+                                          method = "mc")
> 
> #Plot technical/allocative efficiency over time
> library(ggplot2)
> 
> technical.df <- data.frame(Year = USMacro$Year,
+                           Efficiency = efficiency.model$technical.efficiency)
> 
> ggplot(technical.df, aes(Year, Efficiency)) +
+   geom_line()
> 
> allocative.df <- data.frame(Year = rep(USMacro$Year, times = 2),
+                             log.overallocation = c(efficiency.model$log.overallocation[,1],
+                                                    efficiency.model$log.overallocation[,2]),
+                             Variable = rep(c("K", "L"), each = nrow(USMacro)))
> 
> ggplot(allocative.df, aes(Year, log.overallocation)) +
+   geom_line(aes(color = Variable))
> 
> #Estimate average overallocation across sample period
> lm.model <- lm(log.overallocation ~ 0 + Variable, allocative.df)
> summary(lm.model)

Call:
lm(formula = log.overallocation ~ 0 + Variable, data = allocative.df)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.43704 -0.18195 -0.08572  0.14338  0.61385 

Coefficients:
          Estimate Std. Error t value Pr(>|t|)    
VariableK   2.0297     0.0465   43.65   <2e-16 ***
VariableL  -0.8625     0.0465  -18.55   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.279 on 70 degrees of freedom
Multiple R-squared:  0.9698,	Adjusted R-squared:  0.9689 
F-statistic:  1124 on 2 and 70 DF,  p-value: < 2.2e-16

>   
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("allocative.efficiency", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:ggplot2'

> nameEx("fit.boundary")
> ### * fit.boundary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fit.boundary
> ### Title: Multivariate smooth boundary fitting with additional constraints
> ### Aliases: fit.boundary
> 
> ### ** Examples
> 
> data(univariate)
> 
> #Set up data for fitting
> 
> X <- as.matrix(univariate$x)
> y <- univariate$y
> 
> N.fit <- 100
> X.fit <- as.matrix(seq(min(X), max(X), length.out = N.fit))
> 
> #Reflect data for fitting
> reflected.data <- reflect.data(X, y)
> X.eval <- reflected.data$X
> y.eval <- reflected.data$y
> 
> #Fit frontiers
> frontier.u <- fit.boundary(X.eval, y.eval, 
+                            X.bounded = X, y.bounded = y,
+                            X.constrained = X.fit,
+                            X.fit = X.fit,
+                            method = "u")
>                           
> frontier.m <- fit.boundary(X.eval, y.eval, 
+                            X.bounded = X, y.bounded = y,
+                            X.constrained = X.fit,
+                            X.fit = X.fit,
+                            method = "m")
>                           
> frontier.mc <- fit.boundary(X.eval, y.eval, 
+                             X.bounded = X, y.bounded = y,
+                             X.constrained = X.fit,
+                             X.fit = X.fit,
+                             method = "mc")
> 
> #Plot frontier
> library(ggplot2)
> 
> frontier.df <- data.frame(X = rep(X.fit, times = 3),
+                           y = c(frontier.u$y.fit, frontier.m$y.fit, frontier.mc$y.fit),
+                           model = rep(c("u", "m", "mc"), each = N.fit))
> 
> ggplot(univariate, aes(X, y)) +
+   geom_point() +
+   geom_line(data = frontier.df, aes(color = model))
> 
> #Plot slopes
> slope.df <- data.frame(X = rep(X.fit, times = 3),
+                        slope = c(frontier.u$gradient.fit,
+                                  frontier.m$gradient.fit,
+                                  frontier.mc$gradient.fit),
+                        model = rep(c("u", "m", "mc"), each = N.fit))
> 
> ggplot(slope.df, aes(X, slope)) +
+   geom_line(aes(color = model))
>   
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fit.boundary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:ggplot2'

> nameEx("fit.mean")
> ### * fit.mean
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fit.mean
> ### Title: Kernel smoothing with additional constraints
> ### Aliases: fit.mean
> 
> ### ** Examples
> 
> data(USMacro)
> 
> USMacro <- USMacro[complete.cases(USMacro),]
> 
> #Extract data
> X <- as.matrix(USMacro[,c("K", "L")])
> y <- USMacro$Y
> 
> #Reflect data for fitting
> reflected.data <- reflect.data(X, y)
> X.eval <- reflected.data$X
> y.eval <- reflected.data$y
> 
> #Fit frontier
> fit.mc <- fit.mean(X.eval, y.eval, 
+                    X.constrained = X,
+                    X.fit = X,
+                    method = "mc")
> 
> #Plot input productivities over time
> library(ggplot2)
> plot.df <- data.frame(Year = rep(USMacro$Year, times = 2),
+                       Elasticity = c(fit.mc$gradient.fit[,1] * X[,1] / y,
+                                      fit.mc$gradient.fit[,2] * X[,2] / y),
+                       Variable = rep(c("Capital", "Labor"), each = nrow(USMacro)))
> 
> ggplot(plot.df, aes(Year, Elasticity)) +
+   geom_line() +
+   facet_grid(Variable ~ ., scales = "free_y")
>   
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fit.mean", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:ggplot2'

> nameEx("fit.sf")
> ### * fit.sf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fit.sf
> ### Title: Non-parametric stochastic frontier
> ### Aliases: fit.sf
> 
> ### ** Examples
> 
> data(USMacro)
> 
> USMacro <- USMacro[complete.cases(USMacro),]
> 
> #Extract data
> X <- as.matrix(USMacro[,c("K", "L")])
> y <- USMacro$Y
> 
> #Fit frontier
> fit.sf <- fit.sf(X, y,
+                  X.constrained = X,
+                  method = "mc")
> 
> print(fit.sf$mean.efficiency)
[1] 0.9772484
> # [1] 0.9772484
> 
> #Plot efficiency over time
> library(ggplot2)
> 
> plot.df <- data.frame(Year = USMacro$Year,
+                       Efficiency = fit.sf$mode.efficiency)
> 
> ggplot(plot.df, aes(Year, Efficiency)) +
+   geom_line()
>   
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fit.sf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:ggplot2'

> nameEx("reflect.data")
> ### * reflect.data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: reflect.data
> ### Title: Data reflection for kernel smoothing
> ### Aliases: reflect.data
> 
> ### ** Examples
> 
> data(univariate)
> 
> #Extract data
> X <- as.matrix(univariate$x)
> y <- univariate$y
> 
> #Reflect data
> reflected.data <- reflect.data(X, y)
> 
> X.reflected <- reflected.data$X
> y.reflected <- reflected.data$y
> 
> #Plot
> library(ggplot2)
> 
> plot.df <- data.frame(X = X.reflected,
+                       y = y.reflected,
+                       data = rep(c("reflected", "actual", "reflected"), each = nrow(X)))
> 
> ggplot(plot.df, aes(X, y)) +
+   geom_point(aes(color = data))
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("reflect.data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:ggplot2'

> nameEx("technical.efficiency.change")
> ### * technical.efficiency.change
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: technical.efficiency.change
> ### Title: Technical and efficiency change estimation
> ### Aliases: technical.efficiency.change
> 
> ### ** Examples
> 
> data(panel.production)
> 
> results.df <- technical.efficiency.change(df = panel.production,
+                                           input.var.names = c("X.1", "X.2", "X.3"),
+                                           output.var.name = "y",
+                                           firm.var.name = "Firm",
+                                           time.var.name = "Year")
> 
> #Plot changes over time by firm
> library(ggplot2)
> 
> ggplot(results.df, aes(Year, technical.change)) +
+   geom_line(aes(color = Firm))
> ggplot(results.df, aes(Year, efficiency.change)) +
+   geom_line(aes(color = Firm))
> ggplot(results.df, aes(Year, productivity.change)) +
+   geom_line(aes(color = Firm))
>   
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("technical.efficiency.change", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()

detaching 'package:ggplot2'

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.27 0.57 7.86 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
